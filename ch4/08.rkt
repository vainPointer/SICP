(define (named-let? exp) (and (let? exp) (eq? 4 (length exp))))
(define (named-let-name exp) (cadr exp))
(define (named-let-bindings exp) (caddr exp))
(define (named-let-variables exp) (map car (caddr exp)))
(define (named-let-values exp) (map cdr (caddr exp)))
(define (named-let-body exp) (cadddr exp))

(define (let->lambda exp)
  (if (named-let? exp)
      ((list 'define (named-let-name exp)
             (make-lambda (named-let-variables exp)
                          (named-let-body exp)))
       ((named-let-name exp) (named-let-values exp)))
      ((make-lambda (let-variables exp) (let-body exp))
       (let-values exp))))